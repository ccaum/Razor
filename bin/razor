#!/usr/bin/env ruby
#
# CLI Control for ProjectRazor
# Format will be 'project_razor [module namespace] [module args{}]'
#

# We first add our Lib path to the load path. This is for non-gem ease of use
lib_path = File.dirname(File.expand_path(__FILE__)).sub(/\/bin$/,"/lib")
$LOAD_PATH.unshift(lib_path)

require 'rubygems' if RUBY_VERSION < '1.9'
# We require the root lib
require "project_razor_interface"

# We need these for misc operations later
require "extlib"
require "json"
require "colored"

class << self
  attr_accessor :razor
end

def print_header
  puts "\nRazor - #{razor.version}".bold.green
  print "\n\tUsage: ".bold
  print "\n\trazor "
  print "[slice name] [command argument] [command argument]...\n".red
  print "\t Switches:\n".yellow
  print "\t\t --debug        : Enables printing proper Ruby stacktrace\n".yellow
  print "\t\t --verbose      : Enables verbose object printing\n".yellow
  print "\t\t --no-color-out : Disables console color. Useful for script wrapping.\n".yellow
  print_loaded_slices
end

def print_loaded_slices
  print "\nLoaded slices:\n\t"
  x = 1
  razor.slice_array.sort.each do |slice|
    slice_obj = Object.full_const_get(ProjectRazorInterface::SLICE_PREFIX + slice.capitalize).new([])
    unless slice_obj.hidden
      print "[#{slice.downcase}] ".white
      if x > 5
        print "\n\t"
        x = 0
      end
      x += 1
    end
  end
  print "\n"
end

# First check to see if we have executed from command line
if $0 == __FILE__

  @razor = ProjectRazorInterface.new

  if ARGV.count > 0
    while ARGV[0] && ARGV[0].start_with?("-")
      switch = ARGV.shift
      case switch
      when "--web-command", "-w"
        razor.web_command = true
      when "--debug", "-d"
        razor.debug = true
      when "--verbose", "-v"
        razor.verbose = true
      when "--no-color-out","-nc"
        # if this flag is set, override the default behavior of the underlying "colorize" method
        # from the "Colored" module so that it just returns the string that was passed into it
        # (this will have the effect of turning off any color that might be included in any of
        # the output statements involving Strings in Razor)
        module Colored
          extend self
          def colorize(string, options = {})
            string
          end
        end
        String.send(:include, Colored)
      end
    end

    razor.namespace = ARGV.shift
    razor.arguments = ARGV

    begin
      result = razor.call_razor_slice
      if razor.web_command
        puts result
      else
        puts result
      end
    rescue ProjectRazorInterface::NoSliceFound
      print_header
      print "\n [#{razor.namespace.capitalize}] ".red
      print "<-Invalid Slice \n".yellow
    rescue => e
      raise if razor.debug
      if razor.namespace
        print "\n [#{razor.namespace.capitalize}] ".red
        print "<-#{e.message} \n".yellow
      end
    end

  else
    unless @web_command
      print_header
    end
  end
end
